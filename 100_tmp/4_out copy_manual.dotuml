ClassDiagram {

class imi_video_buffer {
	"struct list_head" : "list"
	"unsigned int" : "    index"
	"unsigned int" : "    frame_len"
	"enum imi_buffer_state" : "   state"
	"void" : "    *mem"
	"unsigned int" : "    transferred"
	"unsigned int" : "    buf_id"
	"struct imi_video_sub_dev" : "*dev  /*0*/"
    "//  0 "(imi_video_sub_dev)
}
class imi_video_queue {
	"struct list_head" : "queued_entry"
	"struct list_head" : "started_entry"
	"struct list_head" : "done_entry"
	"spinlock_t" : "      queue_lock"
    "//  1 "(imi_video_dev)
}
class imi_video_req {
	"struct usb_request" : "      *req[VIDEO_REQ_NUM]"
	"unsigned char" : "   *req_buffer[VIDEO_REQ_NUM]"
	"struct list_head" : "req_free"
	"struct list_head" : "req_busy"
	"spinlock_t" : "      req_lock"
    "//  0 "(imi_video_dev)
}
class imi_video_sub_dev {
	"int" : "     stream_on"
	"enum imi_stream_type" : "    type"
	"int (*encode)"()
	"struct imi_video_buffer" : " *vbuf  /*0*/"
	"int" : "     vbuf_num"
	"enum imi_buf_type" : "       buf_type"
	"unsigned int" : "    buf_offset"
    "//  0 "(imi_video_buffer)
    "//  2 "(imi_video_dev)
}
class imi_upload_dev {
	"struct usb_ep" : "   *ep_out"
	"int" : "     bulk_out_maxpacket"
	"struct imi_wait_head" : "    read_wq"
	"spinlock_t" : "      lock"
	"int" : "     error"
	"struct usb_request" : "      *rx_req"
	"int" : "     rx_done"
	"struct usb_request" : "      *tx_req"
	"FRTOS_completion_t" : "      tx_complete"
    "//  3 "(imi_video_dev)
}
class imi_video_dev {
	"struct usb_ep" : "   *ep"
	"int" : "     connect"
	"struct imi_wait_head" : "    wait"
	"unsigned int" : "    max_payload_size"
	"struct imi_video_req" : "    video_req  /*0*/"
	"struct imi_video_queue" : "  video_queue  /*1*/"
	"struct imi_video_sub_dev" : " sub_dev[IMI_STREAM_MAX]  /*2*/"
	"struct imi_upload_dev" : "   udev  /*3*/"
    "//  0 "(imi_vendor_dev)
}
class imi_vendor_dev {
	"struct usb_function" : "     function"
	"struct usb_composite_dev" : "*cdev"
	"int" : "     online"
	"struct imi_video_dev" : "    vdev  /*0*/"
}

class musb_hw_ep {
	"struct musb" : "     *musb  /*0*/"
	"void __iomem" : "    *fifo"
	"void __iomem" : "    *regs"
	"u8" : "      epnum"
	"bool" : "    is_shared_fifo"
	"bool" : "    tx_double_buffered"
	"bool" : "    rx_double_buffered"
	"u16" : "     max_packet_sz_tx"
	"u16" : "     max_packet_sz_rx"
	"void __iomem" : "    *target_regs"
	"u8" : "      rx_reinit"
	"u8" : "      tx_reinit"
	"struct musb_ep" : "  ep_in  /*3*/"
	"struct musb_ep" : "  ep_out  /*4*/"
    "//  3 "(musb)
    "//  5 "(musb)
    "//  0 "(musb_ep)
}

class musb {
	"spinlock_t" : "      lock"
	"struct musb_io" : "  io  /*0*/"
	"struct musb_platform_ops" : "*ops  /*1*/"
	"struct musb_context_registers" : "context  /*2*/"
	"irqreturn_t     (*isr)"(in:"int" , void:"*")
	"u16" : "     hwvers"
	"u32" : "     port1_status"
	"unsigned long" : "   rh_timer"
	"enum musb_h_ep0_state" : "   ep0_stage"
	"struct musb_hw_ep" : "       *bulk_ep  /*3*/"
	"struct list_head" : "control"
	"struct list_head" : "in_bulk"
	"struct list_head" : "out_bulk"
	"struct device" : "   *controller"
	"void __iomem" : "    *ctrl_base"
	"void __iomem" : "    *mregs"
	"u8" : "      int_usb"
	"u16" : "     int_rx"
	"u16" : "     int_tx"
	"unsigned char" : "   state"
	"int" : "     nIrq"
	"unsigned" : "irq_wake:1"
	"struct musb_hw_ep" : " endpoints[MUSB_C_NUM_EPS]  /*5*/"
	"u16" : "     vbuserr_retry"
	"u16" : "     epmask"
	"u8" : "      nr_endpoints"
	"u8" : "      board_mode"
	"int         (*board_set_power)"(int:"state")
	"u8" : "      min_power"
	"bool" : "    is_host"
	"int" : "     a_wait_bcon"
	"unsigned long" : "   idle_timeout"
	"unsigned" : "is_active:1"
	"unsigned" : "is_multipoint:1"
	"unsigned" : "ignore_disconnect:1"
	"unsigned" : "hb_iso_rx:1"
	"unsigned" : "hb_iso_tx:1"
	"unsigned" : "dyn_fifo:1"
	"unsigned" : "bulk_split:1"
	"unsigned" : "bulk_combine:1"
	"unsigned" : "is_suspended:1"
	"unsigned" : "may_wakeup:1"
	"unsigned" : "is_self_powered:1"
	"unsigned" : "is_bus_powered:1"
	"unsigned" : "set_address:1"
	"unsigned" : "test_mode:1"
	"unsigned" : "softconnect:1"
	"u8" : "      address"
	"u8" : "      test_mode_nr"
	"u16" : "     ackpend"
	"enum musb_g_ep0_state" : "   ep0_state"
	"struct usb_gadget" : "       g"
	"struct usb_gadget_driver" : "*gadget_driver"
	"unsigned" : "double_buffer_not_ok:1"
	"struct musb_hdrc_config" : " *config"
    "//  0 "(musb_hw_ep)
    "//  1 "(musb_request)
    "//  1 "(musb_ep)
}

class musb_request {
	"struct usb_request" : "      request"
	"struct list_head" : "list"
	"struct musb_ep" : "  *ep  /*0*/"
	"struct musb" : "     *musb  /*1*/"
	"u8" : "      tx"
	"u8" : "      epnum"
	"enum buffer_map_state" : "   map_state"
}

class musb_ep {
	"struct usb_ep" : "   end_point"
	"char" : "    name[12]"
	"struct musb_hw_ep" : "       *hw_ep  /*0*/"
	"struct musb" : "     *musb  /*1*/"
	"u8" : "      current_epnum"
	"u8" : "      type"
	"u8" : "      is_in"
	"u16" : "     packet_sz"
	"struct usb_endpoint_descriptor" : " *desc"
	"struct list_head" : "req_list"
	"u8" : "      wedged"
	"u8" : "      busy"
	"u8" : "      hb_mult"
    "//  3 "(musb_hw_ep)
    "//  4 "(musb_hw_ep)
    "//  0 "(musb_request)
}
class musb_io {
	"u32" : "     quirks"
	"u32 (*ep_offset)"(u8:"epnum" , u16:"offset")
	"void    (*ep_select)"(__iomem:"*mbase" , u8:"epnum")
	"u32 (*fifo_offset)"(u8:"epnum")
	"void    (*read_fifo)"(musb_hw_ep:"*hw_ep" , u16:"len" , u8:"*buf")
	"void    (*write_fifo)"(musb_hw_ep:"*hw_ep" , u16:"len" , u8:"*buf")
	"u32 (*busctl_offset)"(u8:"epnum" , u16:"offset")
    "//  0 "(musb)
}


imi_video_queue -c-> imi_video_dev
imi_video_req -c-> imi_video_dev
imi_video_sub_dev -c-> imi_video_dev
imi_upload_dev -c-> imi_video_dev
imi_video_dev -c-> imi_vendor_dev

musb_hw_ep -c-> musb
//musb_csr_regs -c-> musb_context_registers
//musb_context_registers -c-> musb


musb_ep -c-> musb_hw_ep
musb_io -c-> musb
//imi_video_buffer -a-> imi_video_sub_dev
//imi_video_sub_dev -a-> imi_video_buffer

//musb_platform_ops -a-> musb
//musb_hw_ep -a-> musb
//musb_hw_ep -a-> musb_ep
//musb -a-> musb_hw_ep
// //musb -a-> musb_request
// //musb -a-> musb_ep



musb_ep -a-> musb_request

align {
	musb_hw_ep
	musb_ep
	//imi_video_queue
}


}